name: PR Check
permissions:
  contents: read

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Oracle JDK 23
      run: |
        sudo apt update
        sudo apt install -y wget
        wget https://download.oracle.com/java/23/archive/jdk-23.0.2_linux-x64_bin.deb
        sudo dpkg -i jdk-23.0.2_linux-x64_bin.deb
        sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk-23.0.2-oracle-x64/bin/java 1
        sudo update-alternatives --set java /usr/lib/jvm/jdk-23.0.2-oracle-x64/bin/java

    - name: Set JAVA_HOME
      run: echo "JAVA_HOME=/usr/lib/jvm/jdk-23.0.2-oracle-x64" >> $GITHUB_ENV

    - name: Verify Java installation
      run: java -version

    - name: Set up Maven
      run: |
        sudo apt update
        sudo apt install -y maven

    - name: Verify Maven installation
      run: mvn -version

    - name: Install MariaDB
      run: |
        sudo apt update
        sudo apt install -y mariadb-server
        sudo service mysql start

    - name: Set up test database
      run: |
        sudo mysql -e "CREATE DATABASE testdb;"
        sudo mysql -e "CREATE USER 'testuser'@'localhost' IDENTIFIED BY 'testpassword';"
        sudo mysql -e "GRANT ALL PRIVILEGES ON testdb.* TO 'testuser'@'localhost';"
        sudo mysql -e "FLUSH PRIVILEGES;"

    - name: Set up application.properties
      run: |
        echo "spring.datasource.url=jdbc:mariadb://localhost:3306/testdb" > src/main/resources/application.properties
        echo "spring.datasource.username=testuser" >> src/main/resources/application.properties
        echo "spring.datasource.password=testpassword" >> src/main/resources/application.properties
        echo "spring.datasource.driver-class-name=org.mariadb.jdbc.Driver" >> src/main/resources/application.properties
        echo "spring.jpa.show-sql=false" >> src/main/resources/application.properties
        echo "spring.jpa.hibernate.ddl-auto=create-drop" >> src/main/resources/application.properties
        echo "spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDBDialect" >> src/main/resources/application.properties
        echo "spring.jpa.properties.hibernate.format_sql=false" >> src/main/resources/application.properties
        echo "spring.mail.host= ${{ secrets.MAIL_HOST }}" >> src/main/resources/application.properties
        echo "spring.mail.port= ${{ secrets.MAIL_PORT }}" >> src/main/resources/application.properties
        echo "spring.mail.username= ${{ secrets.MAIL_USERNAME }}" >> src/main/resources/application.properties
        echo "spring.mail.password= ${{ secrets.MAIL_PASSWORD }}" >> src/main/resources/application.properties
        echo "spring.mail.properties.mail.smtp.auth= true" >> src/main/resources/application.properties
        echo "spring.mail.properties.mail.smtp.starttls.enable= true" >> src/main/resources/application.properties
        echo "spring.security.oauth2.client.registration.discord.client-id= ${{ secrets.DISCORD_CLIENT_ID }}" >> src/main/resources/application.properties
        echo "spring.security.oauth2.client.registration.discord.client-secret= ${{ secrets.DISCORD_CLIENT_SECRET }}" >> src/main/resources/application.properties
        echo "spring.security.oauth2.client.registration.discord.scope=identify,email" >> src/main/resources/application.properties
        echo "spring.security.oauth2.client.registration.discord.authorization-grant-type=authorization_code" >> src/main/resources/application.properties
        echo "spring.security.oauth2.client.registration.discord.redirect-uri={baseUrl}/login/oauth2/code/discord" >> src/main/resources/application.properties
        echo "spring.security.oauth2.client.provider.discord.authorization-uri=https://discord.com/oauth2/authorize" >> src/main/resources/application.properties
        echo "spring.security.oauth2.client.provider.discord.token-uri=https://discord.com/api/oauth2/token" >> src/main/resources/application.properties
        echo "spring.security.oauth2.client.provider.discord.user-info-uri=https://discord.com/api/users/@me" >> src/main/resources/application.properties
        echo "spring.security.oauth2.client.provider.discord.user-name-attribute=id" >> src/main/resources/application.properties
        echo "baseUrl=http://localhost:8080" >> src/main/resources/application.properties
        echo "server.port=8080" >> src/main/resources/application.properties
        echo "recaptcha.secret-key= ${{ secrets.RECAPTCHA_SECRET }}" >> src/main/resources/application.properties
        echo "jwt.secret=${{ secrets.JWT_SECRET }}" >> src/main/resources/application.properties
        echo "jwt.expiration-in-ms=${{ secrets.JWT_EXPIRATION }}" >> src/main/resources/application.properties

    - name: Build and run application
      run: mvn spring-boot:run 2>&1 | grep -vE '(^Download(ed|ing) from central:|^Progress \()' > spring_boot_run.log &

    - name: Wait for application to start completely
      run: |
        app_started=false
        for i in {1..5}; do
          if curl -s http://localhost:8080/actuator/health | grep -q '"status":"UP"'; then
            echo "Application is up!"
            app_started=true
            break
          fi
          echo "Waiting for application to start... (attempt $i/5)"
          sleep 30
        done

        if [ "$app_started" = true ]; then
          echo "Application started successfully."
        else
          echo "Application failed to start after 5 attempts."
          echo "Displaying last 50 lines of application logs:"
          tail -n 50 spring_boot_run.log
          exit 1
        fi